---
from: markdown+emoji
execute:
  cache: true
format:
  letterbox-revealjs:
    theme: [default]
    css: [theme.css, hex.css]
    progress: false
    menu: false
    width: 1280
    height: 720
filters:
  - custom-callouts
callout-appearance: simple
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(fpp3)
```

## {}

::: columns
::: {.column width="40%"}
:::
::: {.column width="60%"}

::: {.title data-id="title"}
Tidy time series analysis and forecasting
:::

::: {.subtitle data-id="subtitle"}
Time series data and patterns
:::

::: {.dateplace}
29th September 2025
:::

##### Mitchell O'Hara-Wild, Nectric

::: {.callout-link}

## Useful links

![](resources/forum.svg){.icon} [social.mitchelloharawild.com](https://social.mitchelloharawild.com/)

![](resources/projector-screen-outline.svg){.icon} [workshop.nectric.com.au/fable-wombat2025/](https://workshop.nectric.com.au/fable-wombat2025/)

![](resources/github.svg){.icon} [mitchelloharawild/workshop-fable-wombat2025](https://github.com/mitchelloharawild/workshop-fable-wombat2025)

:::

:::
:::

![](../backgrounds/sander-weeteling-KABfjuSOx74-unsplash.jpg){.image-left}


## {}


::: columns
::: {.column width="60%"}

::: {.callout}
## :dart: Today's goals

1. Learn about time series data.
2. Visualise common time series patterns.
3. Produce forecasts from a statistical models.
4. Evaluate the forecasting accuracy.
:::

::: {.callout .fragment}
## :sunflower: Expectations

1. Follow the code of conduct.
2. Ask relevant questions any time, Q&A during breaks.
3. Be kind and respectful.
4. Make mistakes and learn!
:::

[<https://workshop.nectric.com.au/fable-wombat2025/>]{.fragment}

:::
:::

![](../backgrounds/balint-mendlik-4-ORHffEh3I-unsplash.jpg){.image-right}

## {}

::: columns
::: {.column width="35%"}

### Mitchell O'Hara‑Wild

#### Monash + Nectric

[![](resources/github.svg){.icon} @mitchelloharawild](https://github.com/mitchelloharawild)

[![](resources/linkedin.svg){.icon} @mitchelloharawild](https://www.linkedin.com/in/mitchelloharawild/)


:::

::: {.column width="65%"}

### Welcome, who am I?

- :mortar_board: PhD candidate at Monash University
- :bar_chart: Data consulting and workshops at Nectric
- :chart_with_upwards_trend: Specialised in time series analysis
- :package: Develops R packages (**fable**, vitae, etc.)
- :robot: DIYs IoT devices for home automation
- :seedling: Permaculturist (:bee:, :hatching_chick:, :mushroom:, :sun_with_face:)

:::
:::

![](../backgrounds/john-fowler-RsRTIofe0HE-unsplash.jpg){.image-left}

## {}



::: columns
::: {.column width="35%"}

### You!

:::

::: {.column width="65%"}

### :raising_hand: Hi, who are you?

Hands up if...

::: {.incremental}
* :technologist: You've used R
* :bar_chart: You've analysed data
* :bubbles: Used tidyverse packages (dplyr, ggplot2...)
* :chart_with_upwards_trend: You've worked with time series data before
* :crystal_ball: You've produced a forecast before
* :star_struck: You've used fable!
:::

:::
:::

![](../backgrounds/john-fowler-RsRTIofe0HE-unsplash.jpg){.image-left}


## {}

::: columns
::: {.column width="60%"}

### Tidy time series analysis

This workshop is about **tidy** time series in R.

:::{.fragment .fade-in}
We'll be using these packages!

:::{.hextile .clr}
* ![](resources/tsibble.png)
* ![](resources/fable.svg)
* ![](resources/feasts.svg)
* ![](resources/tsibbledata.svg)
* ![](resources/tidyverse.svg)
:::

Install them all with `install.packages("fpp3")`

:::


:::
:::

![](../backgrounds/david-pisnoy-46juD4zY1XA-unsplash.jpg){.image-right}



## {}

::: columns
::: {.column width="60%"}

### Tidy time series analysis

This workshop is about **tidy** time series in R.

I'll also introduce two new WIP packages!

:::{.hextile .clr}
* ![](resources/ggtime.svg)
* ![](resources/mixtime.svg)
:::

Install them with:

```{r}
#| eval: false
#| echo: true
library(remotes)
remotes::install_github("mitchelloharawild/ggtime")
remotes::install_github("mitchelloharawild/mixtime")
```


:::
:::

![](../backgrounds/david-pisnoy-46juD4zY1XA-unsplash.jpg){.image-right}

## {}

::: columns
::: {.column width="60%"}

### Design of the forecast package

:::{.callout-note icon=false}
![](resources/forecast.svg){style="height:160px;float:right;padding-left:10px"}

* [Forecasting **individual** time series]{.fragment .fade-up fragment-index=1}
* [**Regular** and **infrequent** observations<br> (monthly, quarterly or annually)]{.fragment .fade-up fragment-index=2}
* [**Point forecasts** and **intervals**]{.fragment .fade-up fragment-index=3}
* [Consistent with `ts` models]{.fragment .fade-up fragment-index=4}
:::

### Design of the fable package

:::{.callout-note icon=false}
![](resources/fable.svg){style="height:160px;float:right;padding-left:10px"}

* [Forecasting **many** time series]{.fragment .fade-up fragment-index=1}
* [Observations at **any time**<br> (sub-daily, irregular, monthly, etc.)]{.fragment .fade-up fragment-index=2}
* [Forecast **distributions**]{.fragment .fade-up fragment-index=3}
* [Consistent with the `tidyverse`]{.fragment .fade-up fragment-index=4}
:::

<!-- Both are designed to be easy to use -->

:::
:::

![](../backgrounds/david-pisnoy-46juD4zY1XA-unsplash.jpg){.image-right}



## {}

::: columns
::: {.column width="60%"}

### Tidy time series packages

```r
# Data manipulation
library(dplyr)
# Plotting functions
library(ggplot2)
# Time and date manipulation
library(lubridate)
# Time series class
library(tsibble)
# Tidy time series data
library(tsibbledata)
# Time series graphics and statistics
library(feasts)
# Forecasting functions
library(fable)
```

::: {.fragment .fade-in}

![](resources/fpp3.svg){style="height:200px;float:right;padding-left:10px;margin-top:-50px"}
```r
# All of the above
library(fpp3)
```
:::




:::
:::

![](../backgrounds/david-pisnoy-46juD4zY1XA-unsplash.jpg){.image-right}

## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Time series data

- Four-yearly Olympic winning times
- Annual Google profits
- Quarterly Australian beer production
- Monthly pharmaceutical subsidies
- Weekly retail sales
- Daily COVID-19 infections
- Hourly electricity demand
- Minutely blood glucose measurements
- Time-stamped stock transaction data

:::
:::

![](../backgrounds/chris-lee-70l1tDAI6rM-unsplash.jpg){.image-left}

## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Time series data

Comes in all shapes and sizes!

Like all data, we hope it's tidy :broom:

::: {.callout-tip .fragment}
## All time series data contain...

* The time of the observation (*index*)
* One or more observations (*measurements*)

:::{.fragment .fade-in}
Some datasets have identifying metadata,

* Identifying variables for the series (*key*)
:::
:::

:::
:::

![](../backgrounds/chris-lee-70l1tDAI6rM-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### The tsibble data format

![](resources/tsibble.png){.sticker-float-right}

A tsibble is a tibble for time series!

The quarterly visitors to Australia are found in the `tourism` dataset.

```{r}
#| echo: true
#| message: false
library(fpp3)
tourism
```


:::
:::

![](../backgrounds/chris-lee-70l1tDAI6rM-unsplash.jpg){.image-left}

## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}


```{r}
#| message: false
library(fpp3)
as_tibble(tourism)
```

:::{.callout-tip}
## Column types

In this dataset, the column types are:

* `index` variable: [`Quarter`]{.fragment .fade-in}
* `key` variable(s): [`Region`, `State`, and `Purpose`]{.fragment .fade-in}
* measured variable(s): [`Trips`]{.fragment .fade-in}

:::

:::
:::

![](../backgrounds/chris-lee-70l1tDAI6rM-unsplash.jpg){.image-left}

## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

```{r}
#| eval: false
#| echo: true
pedestrian
```
```{r}
#| message: false
as_tibble(pedestrian)
```

:::{.callout-caution}
## Exercise 1

In this dataset, which columns are:

* index variable(s)?
* key variable(s)?
* measured variable(s)?

:::

:::
:::

![](../backgrounds/chris-lee-70l1tDAI6rM-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Our first tsibble

A **ts**ibble is a ***t**ime **s**eries* tibble.

It is created with `as_tsibble()`.

```{r}
#| echo: true
tourism |> 
  as_tsibble(
    key = c(Region, State, Purpose),
    index = Quarter
  )
```

:::
:::

![](../backgrounds/jon-tyson-FlHdnPO6dlw-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Our first tsibble

::: {.callout-caution}
## Exercise 2

Identify the `index` and `key` variables of the `aus_accommodation` dataset.

Then use `as_tsibble()` to convert it into a tsibble.

```{r}
#| eval: false
#| echo: true
library(fpp3)
read.csv(
  "https://workshop.nectric.com.au/fable-wombat2025/data/aus_accommodation.csv"
)
```

:::

:::
:::

![](../backgrounds/jon-tyson-FlHdnPO6dlw-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Representing time (the index)

Time is surprisingly tricky to represent!

* frequency
* granularity
* time zones
* calendars
* leap years (and seconds?!)
* holidays
* civil/absolute time
* time periods

:::
:::

![](../backgrounds/jon-tyson-FlHdnPO6dlw-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Representing time (the index)

Common time index variables can be created with these functions:

```{r}
tribble(
  ~`Granularity`, ~Function,
  "Annual", "`start:end`",
  "Quarterly", "`yearquarter()`",
  "Monthly", "`yearmonth()`",
  "Weekly", "`yearweek()`",
  "Daily", "`as_date()`, `ymd()`",
  "Sub-daily", "`as_datetime()`"
) |>
  knitr::kable(booktabs = TRUE)
```


:::
:::

![](../backgrounds/jon-tyson-FlHdnPO6dlw-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

![](resources/mixtime.svg){.sticker-float-right}

### Representing time

::: {.callout-note icon="false"}

## ⏳ More time classes

The `mixtime` package (WIP) provides more granularities.

* linear and circular granularities,
* timezones for all time classes,
* continuous and discrete time models,
* non-Gregorian calendars.

It also enables mixed time classes in a single tsibble!

:::

:::
:::

![](../backgrounds/jon-tyson-FlHdnPO6dlw-unsplash.jpg){.image-left}



## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Creating a tsibble

1. Tidy the data into a long format
2. Appropriately class the time variable
3. Convert to tsibble with `as_tsibble()`, identifying the `index` and `key` variable(s).

::: {.callout-caution}
## Follow along

Let's convert the tourism dataset into a tsibble.

```{r}
#| eval: false
#| echo: true
library(fpp3)
read.csv(
  "https://workshop.nectric.com.au/fable-wombat2025/data/tourism.csv"
)
```

:::

:::
:::

![](../backgrounds/jon-tyson-FlHdnPO6dlw-unsplash.jpg){.image-left}



## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Creating a tsibble

1. Tidy the data into a long format
2. Appropriately class the time variable
3. Convert to tsibble with `as_tsibble()`, identifying the `index` and `key` variable(s).

::: {.callout-caution}
## Exercise 3

Redo the previous exercise, but this time use the appropriate time class for the index variable.

You should see the frequency of the tsibble matches the quarterly frequency of the measurements.

:::

:::
:::

![](../backgrounds/jon-tyson-FlHdnPO6dlw-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="60%"}

### Manipulating time series data

Tidy time series data uses tidyverse tools!

::: {.callout-caution}
## Exercise 4

Try calculating the total tourists visiting Victoria from the `tourism` dataset.

*Hint: use `filter()` to keep only visitors to "Victoria", then `summarise()` to calculate the total trips.*

:::

:::
:::

![](../backgrounds/randy-fath-R5_1N6ZgCOo-unsplash.jpg){.image-right}

## {}

::: columns

::: {.column width="60%"}

### Manipulating time series data

However there are some differences when working with time...

The time `index` is always preserved (implicit `group_by()`).

::: {.callout-tip}
## Grouping across time

Sometimes you want to summarise over time.

Summarising over all of time is no longer a time series, so first convert to a tibble with `as_tibble()`.

To re-index by a new variable, use `index_by()`.
:::

:::
:::

![](../backgrounds/randy-fath-R5_1N6ZgCOo-unsplash.jpg){.image-right}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

![](resources/ggtime.svg){.sticker-float-right}

### Visualising time series

::: {.callout-note icon=false}

## 📈 Temporal patterns

Time series visualisation helps us identify *time series patterns*.

These patterns include:

* trends
* seasonalities
* cycles
* covariates
* events

They also help identify anomalies/outliers.

:::

:::
:::

![](../backgrounds/nathan-dumlao-5Hl5reICevY-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

::: {.callout}
## Time plots

The most common time series graphic is the "time plot", created with `autoplot()`.

```{r}
#| echo: true
pbs_scripts <- PBS |>
  summarise(Scripts = sum(Scripts))
pbs_scripts |>
  autoplot(Scripts)
```
:::

:::
:::

![](../backgrounds/nathan-dumlao-5Hl5reICevY-unsplash.jpg){.image-left}

## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

::: {.callout}
## Seasonal plots

The `gg_season()` plots help identify peaks and troughs in seasonal patterns.

```{r}
#| echo: true
pbs_scripts |>
  gg_season(Scripts)
```
:::

:::

:::

![](../backgrounds/nathan-dumlao-5Hl5reICevY-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

::: {.callout}
## Seasonal sub-series plots

The `gg_subseries()` plots help identify changes in seasonal patterns.

```{r}
#| echo: true
pbs_scripts |>
  gg_subseries(Scripts)
```
:::

:::
:::

![](../backgrounds/nathan-dumlao-5Hl5reICevY-unsplash.jpg){.image-left}


## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

::: {.callout}
## ACF plots

The `ACF() |> autoplot()` plots show autocorrelations, helping to identify trends, seasons and cycles.

```{r}
#| echo: true
pbs_scripts |>
  ACF(Scripts) |> 
  autoplot()
```
:::

:::
:::

![](../backgrounds/nathan-dumlao-5Hl5reICevY-unsplash.jpg){.image-left}

## {}

::: columns

::: {.column width="40%"}
:::

::: {.column width="60%"}

### Visualising time series

::: {.callout-caution}
## Exercise 5

Visualise and describe the temporal patterns of visitors to Victoria in the `tourism` dataset.

Here's some code to get you started:

```{r}
#| echo: true
vic_tourism <- tourism |> 
  filter(State == "Victoria") |> 
  summarise(Trips = sum(Trips))
vic_tourism |> 
  autoplot(Trips)
```


:::

:::
:::

![](../backgrounds/nathan-dumlao-5Hl5reICevY-unsplash.jpg){.image-left}


## Seasonal or Cyclical?

These common patterns are commonly confused, can you tell them apart?

::: {.callout-tip}
## What's the difference?


Seasonal patterns have...

* **Consistent** and predictable shape,
* Repeats with a **fixed time period**

Cyclical patterns have...

* **Inconsistent** shape and amplitude,
* Repeats with a **variable time period**

:::

## Seasonal or Cyclical?

These common patterns are commonly confused, can you tell them apart?

```{r}
library(patchwork)
(autoplot(as_tsibble(USAccDeaths), value)+ylab(NULL))/autoplot(ACF(as_tsibble(USAccDeaths), value))
```


## Seasonal or Cyclical?

These common patterns are commonly confused, can you tell them apart?

```{r}
library(patchwork)
(autoplot(pelt, Lynx)+ylab(NULL))/autoplot(ACF(pelt, Lynx))
```

## Seasonal or Cyclical?

These common patterns are commonly confused, can you tell them apart?

```{r}
library(patchwork)
(autoplot(as_tsibble(sunspot.year), value)+ylab(NULL))/autoplot(ACF(as_tsibble(sunspot.year), value))
```


## Seasonal or Cyclical?

These common patterns are commonly confused, can you tell them apart?

```{r}
library(patchwork)
(autoplot(aus_production, Beer)+ylab(NULL))/autoplot(ACF(aus_production, Beer))
```

## :alarm_clock: Time for a break!

::: columns
::: {.column width="60%"}


::: {.callout-tip}
## Up next...

* Simplifying patterns with transformations,
* Specifying time series models,
* Training models on data,
* Forecasting the future!
:::

::: {.callout-link}
## Useful links

![](resources/forum.svg){.icon} [social.mitchelloharawild.com](https://social.mitchelloharawild.com/)

![](resources/projector-screen-outline.svg){.icon} [workshop.nectric.com.au/fable-wombat2025/](https://workshop.nectric.com.au/fable-wombat2025/)

![](resources/github.svg){.icon} [mitchelloharawild/workshop-fable-wombat2025](https://github.com/mitchelloharawild/workshop-fable-wombat2025)
:::

:::
:::

![](../backgrounds/sander-weeteling-KABfjuSOx74-unsplash.jpg){.image-right}

<!-- Made with :heart: and [Quarto](https://quarto.org/). -->


## Unsplash credits

::: {.callout-unsplash}

## Thanks to these Unsplash contributors for their photos

```{r unsplash}
#| echo: FALSE
#| cache: TRUE
library(httr)
library(purrr)
unsplash_pattern <- ".*-(.{11})-unsplash\\.jpg.*"
slides <- readLines("index.qmd")
backgrounds <- slides[grepl("../backgrounds/.+?unsplash.jpg", slides)]
images <- unique(sub(".*\\(backgrounds/(.+?)\\).*", "\\1", backgrounds))
images <- images[grepl(unsplash_pattern, images)]
ids <- sub(unsplash_pattern, "\\1", images)

get_unsplash_credit <- function(id) {
  unsplash_url <- "https://api.unsplash.com/" 
  my_response <- httr::GET(unsplash_url, path = c("photos", id), query = list(client_id=Sys.getenv("UNSPLASH_ACCESS")))
  xml <- content(my_response)
  
  name <- xml$user$name
  desc <- xml$description%||%"Photo"
  sprintf(
    "* %s: [%s%s](%s)",
    name,
    strtrim(desc,60-nchar(name)),
    if(nchar(desc)>(60-nchar(name))) "..." else "",
    modify_url("https://unsplash.com/", path = file.path("photos", xml$id))
  )
}
htmltools::includeMarkdown(paste0(map_chr(ids, get_unsplash_credit), collapse = "\n"))
```

:::

<!-- ## References -->
